- name: Update package cache
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'
- name: Install required packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - "{{ php_version }}"
    - php-mysql  # Add additional PHP extensions as needed
#    - mysql-client
    - unzip
    - wget
    - "{{ php_version }}-fpm"
  when: ansible_os_family == 'Debian'
- name: Ensure Nginx service is enabled and running
  service:
    name: nginx
    state: started
    enabled: yes
- name: Download and extract WordPress
  get_url:
    url: "https://wordpress.org/latest.tar.gz"
    dest: /tmp/wordpress.tar.gz
  register: wordpress_download
  when: inventory_hostname == groups['webserver'][0]  # This task runs only on the first node

- name: Extract WordPress
  unarchive:
    src: /tmp/wordpress.tar.gz
    dest: /var/www/html
    remote_src: yes
  when: inventory_hostname == groups['webserver'][0]  # This task runs only on the first node
  notify:
    - Set WordPress permissions

- name: Move files
  shell: mv /var/www/html/wordpress/* /var/www/html
  notify:
    - Set WordPress permissions
  delegate_to: "webserver1"
  when: inventory_hostname == groups['webserver'][0]  # This task runs only on the first node

- name: Set WordPress permissions
  command: chown -R www-data:www-data /var/www/html

- name: Create WordPress config file
  template:
    src: wp-config.php.j2
    dest: /var/www/html/wp-config.php
  when: inventory_hostname == groups['webserver'][0]  # This task runs only on the first node

- name: Create Nginx virtual host configuration
  template:
    src: nginx-site.conf.j2
    dest: /etc/nginx/sites-available/wordpress
  notify:
    - Reload Nginx
- name: Enable Nginx site configuration
  file:
    src: /etc/nginx/sites-available/wordpress
    dest: /etc/nginx/sites-enabled/wordpress
    state: link
  notify:
    - Reload Nginx

